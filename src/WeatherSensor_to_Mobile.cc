// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R2A
// for U-VINNU\Vinnu (Vinnu@Vinnu) on Tue May 30 02:45:58 2017

// Copyright (c) 2000-2017 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "WeatherSensor_to_Mobile.hh"

namespace WeatherSensor__to__Mobile {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_1(10, "30/05/2017"),
cs_0(9, "Frankfurt"),
cs_2(6, "actual"),
cs_3(5, "sunny");
static const unsigned char module_checksum[] = { 0x7c, 0x97, 0x5c, 0x47, 0xa1, 0x10, 0xd7, 0xea, 0x56, 0xc6, 0x5d, 0x73, 0xdb, 0x68, 0x1f, 0xc9 };

/* Global variable definitions */

const XERdescriptor_t       weatherRequest_location_xer_ = { {"location>\n", "location>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherRequest_location_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherRequest_location_descr_ = { "@WeatherSensor_to_Mobile.weatherRequest.location", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherRequest_location_xer_, &weatherRequest_location_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherRequest_date_xer_ = { {"date>\n", "date>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherRequest_date_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherRequest_date_descr_ = { "@WeatherSensor_to_Mobile.weatherRequest.date", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherRequest_date_xer_, &weatherRequest_date_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherRequest_kind_xer_ = { {"kind>\n", "kind>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherRequest_kind_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherRequest_kind_descr_ = { "@WeatherSensor_to_Mobile.weatherRequest.kind", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherRequest_kind_xer_, &weatherRequest_kind_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for weatherRequest
const TTCN_Typedescriptor_t weatherRequest_descr_ = { "@WeatherSensor_to_Mobile.weatherRequest", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static weatherRequest_template template_FrankfurtWeekendWeatherRequest;
const weatherRequest_template& FrankfurtWeekendWeatherRequest = template_FrankfurtWeekendWeatherRequest;
static weatherRequest_template template_officeFrankfurtWeekendWeatherRequest;
const weatherRequest_template& officeFrankfurtWeekendWeatherRequest = template_officeFrankfurtWeekendWeatherRequest;
const XERdescriptor_t       weatherResponse_location_xer_ = { {"location>\n", "location>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_location_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_location_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.location", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherResponse_location_xer_, &weatherResponse_location_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherResponse_date_xer_ = { {"date>\n", "date>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_date_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_date_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.date", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherResponse_date_xer_, &weatherResponse_date_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherResponse_kind_xer_ = { {"kind>\n", "kind>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_kind_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_kind_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.kind", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherResponse_kind_xer_, &weatherResponse_kind_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherResponse_temperature_xer_ = { {"temperature>\n", "temperature>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_temperature_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_temperature_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.temperature", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &weatherResponse_temperature_xer_, &weatherResponse_temperature_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherResponse_windVelocity_xer_ = { {"windVelocity>\n", "windVelocity>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_windVelocity_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_windVelocity_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.windVelocity", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &weatherResponse_windVelocity_xer_, &weatherResponse_windVelocity_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       weatherResponse_conditions_xer_ = { {"conditions>\n", "conditions>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL, -1, XSD_NONE };
const TTCN_JSONdescriptor_t weatherResponse_conditions_json_ = { FALSE, NULL, FALSE, NULL, FALSE };
const TTCN_Typedescriptor_t weatherResponse_conditions_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse.conditions", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &weatherResponse_conditions_xer_, &weatherResponse_conditions_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for weatherResponse
const TTCN_Typedescriptor_t weatherResponse_descr_ = { "@WeatherSensor_to_Mobile.weatherResponse", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static weatherResponse_template template_FrankfurtResponse;
const weatherResponse_template& FrankfurtResponse = template_FrankfurtResponse;
static weatherResponse_template template_serviceFrankfurtResponse1;
const weatherResponse_template& serviceFrankfurtResponse1 = template_serviceFrankfurtResponse1;
static weatherResponse_template template_serviceFrankfurtResponse2;
const weatherResponse_template& serviceFrankfurtResponse2 = template_serviceFrankfurtResponse2;
const TTCN_Typedescriptor_t& MTCType1_descr_ = COMPONENT_descr_;
weatherPort MTCType1_component_weatherOffice("weatherOffice");
const TTCN_Typedescriptor_t& MTCType2_descr_ = COMPONENT_descr_;
servicePort MTCType2_component_weatherService("weatherService");
TTCN_Module module_object("WeatherSensor_to_Mobile", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, start_ptc_function, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_6,
  current_runtime_version.requires_minor_version_2,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

weatherRequest::weatherRequest()
{
}

weatherRequest::weatherRequest(const CHARSTRING& par_location,
    const CHARSTRING& par_date,
    const CHARSTRING& par_kind)
  :   field_location(par_location),
  field_date(par_date),
  field_kind(par_kind)
{
}

weatherRequest::weatherRequest(const weatherRequest& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @WeatherSensor_to_Mobile.weatherRequest.");
if (other_value.location().is_bound()) field_location = other_value.location();
else field_location.clean_up();
if (other_value.date().is_bound()) field_date = other_value.date();
else field_date.clean_up();
if (other_value.kind().is_bound()) field_kind = other_value.kind();
else field_kind.clean_up();
}

void weatherRequest::clean_up()
{
field_location.clean_up();
field_date.clean_up();
field_kind.clean_up();
}

weatherRequest& weatherRequest::operator=(const weatherRequest& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @WeatherSensor_to_Mobile.weatherRequest.");
  if (other_value.location().is_bound()) field_location = other_value.location();
  else field_location.clean_up();
  if (other_value.date().is_bound()) field_date = other_value.date();
  else field_date.clean_up();
  if (other_value.kind().is_bound()) field_kind = other_value.kind();
  else field_kind.clean_up();
}
return *this;
}

boolean weatherRequest::operator==(const weatherRequest& other_value) const
{
return field_location==other_value.field_location
  && field_date==other_value.field_date
  && field_kind==other_value.field_kind;
}

boolean weatherRequest::is_bound() const
{
if(field_location.is_bound()) return TRUE;
if(field_date.is_bound()) return TRUE;
if(field_kind.is_bound()) return TRUE;
return FALSE;
}
boolean weatherRequest::is_value() const
{
if(!field_location.is_value()) return FALSE;
if(!field_date.is_value()) return FALSE;
if(!field_kind.is_value()) return FALSE;
return TRUE;
}
void weatherRequest::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ location := ");
field_location.log();
TTCN_Logger::log_event_str(", date := ");
field_date.log();
TTCN_Logger::log_event_str(", kind := ");
field_kind.log();
TTCN_Logger::log_event_str(" }");
}

void weatherRequest::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @WeatherSensor_to_Mobile.weatherRequest has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) date().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) kind().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "date")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          date().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "kind")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          kind().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @WeatherSensor_to_Mobile.weatherRequest: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@WeatherSensor_to_Mobile.weatherRequest");
  }
}

void weatherRequest::set_implicit_omit()
{
if (location().is_bound()) location().set_implicit_omit();
if (date().is_bound()) date().set_implicit_omit();
if (kind().is_bound()) kind().set_implicit_omit();
}

void weatherRequest::encode_text(Text_Buf& text_buf) const
{
field_location.encode_text(text_buf);
field_date.encode_text(text_buf);
field_kind.encode_text(text_buf);
}

void weatherRequest::decode_text(Text_Buf& text_buf)
{
field_location.decode_text(text_buf);
field_date.decode_text(text_buf);
field_kind.decode_text(text_buf);
}

struct weatherRequest_template::single_value_struct {
CHARSTRING_template field_location;
CHARSTRING_template field_date;
CHARSTRING_template field_kind;
};

void weatherRequest_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_location = ANY_VALUE;
single_value->field_date = ANY_VALUE;
single_value->field_kind = ANY_VALUE;
}
}
}

void weatherRequest_template::copy_value(const weatherRequest& other_value)
{
single_value = new single_value_struct;
if (other_value.location().is_bound()) {
  single_value->field_location = other_value.location();
} else {
  single_value->field_location.clean_up();
}
if (other_value.date().is_bound()) {
  single_value->field_date = other_value.date();
} else {
  single_value->field_date.clean_up();
}
if (other_value.kind().is_bound()) {
  single_value->field_kind = other_value.kind();
} else {
  single_value->field_kind.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void weatherRequest_template::copy_template(const weatherRequest_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.location().get_selection()) {
single_value->field_location = other_value.location();
} else {
single_value->field_location.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.date().get_selection()) {
single_value->field_date = other_value.date();
} else {
single_value->field_date.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.kind().get_selection()) {
single_value->field_kind = other_value.kind();
} else {
single_value->field_kind.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new weatherRequest_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherRequest.");
break;
}
set_selection(other_value);
}

weatherRequest_template::weatherRequest_template()
{
}

weatherRequest_template::weatherRequest_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

weatherRequest_template::weatherRequest_template(const weatherRequest& other_value)
{
copy_value(other_value);
}

weatherRequest_template::weatherRequest_template(const OPTIONAL<weatherRequest>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const weatherRequest&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @WeatherSensor_to_Mobile.weatherRequest from an unbound optional field.");
}
}

weatherRequest_template::weatherRequest_template(const weatherRequest_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

weatherRequest_template::~weatherRequest_template()
{
clean_up();
}

weatherRequest_template& weatherRequest_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

weatherRequest_template& weatherRequest_template::operator=(const weatherRequest& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

weatherRequest_template& weatherRequest_template::operator=(const OPTIONAL<weatherRequest>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const weatherRequest&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @WeatherSensor_to_Mobile.weatherRequest.");
}
return *this;
}

weatherRequest_template& weatherRequest_template::operator=(const weatherRequest_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean weatherRequest_template::match(const weatherRequest& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.location().is_bound()) return FALSE;
if(!single_value->field_location.match(other_value.location(), legacy))return FALSE;
if(!other_value.date().is_bound()) return FALSE;
if(!single_value->field_date.match(other_value.date(), legacy))return FALSE;
if(!other_value.kind().is_bound()) return FALSE;
if(!single_value->field_kind.match(other_value.kind(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherRequest.");
}
return FALSE;
}

boolean weatherRequest_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_location.is_bound()) return TRUE;
if (single_value->field_date.is_bound()) return TRUE;
if (single_value->field_kind.is_bound()) return TRUE;
return FALSE;
}

boolean weatherRequest_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_location.is_value()) return FALSE;
if (!single_value->field_date.is_value()) return FALSE;
if (!single_value->field_kind.is_value()) return FALSE;
return TRUE;
}

void weatherRequest_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

weatherRequest weatherRequest_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @WeatherSensor_to_Mobile.weatherRequest.");
weatherRequest ret_val;
if (single_value->field_location.is_bound()) {
ret_val.location() = single_value->field_location.valueof();
}
if (single_value->field_date.is_bound()) {
ret_val.date() = single_value->field_date.valueof();
}
if (single_value->field_kind.is_bound()) {
ret_val.kind() = single_value->field_kind.valueof();
}
return ret_val;
}

void weatherRequest_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @WeatherSensor_to_Mobile.weatherRequest.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new weatherRequest_template[list_length];
}

weatherRequest_template& weatherRequest_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @WeatherSensor_to_Mobile.weatherRequest.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @WeatherSensor_to_Mobile.weatherRequest.");
return value_list.list_value[list_index];
}

CHARSTRING_template& weatherRequest_template::location()
{
set_specific();
return single_value->field_location;
}

const CHARSTRING_template& weatherRequest_template::location() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field location of a non-specific template of type @WeatherSensor_to_Mobile.weatherRequest.");
return single_value->field_location;
}

CHARSTRING_template& weatherRequest_template::date()
{
set_specific();
return single_value->field_date;
}

const CHARSTRING_template& weatherRequest_template::date() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field date of a non-specific template of type @WeatherSensor_to_Mobile.weatherRequest.");
return single_value->field_date;
}

CHARSTRING_template& weatherRequest_template::kind()
{
set_specific();
return single_value->field_kind;
}

const CHARSTRING_template& weatherRequest_template::kind() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field kind of a non-specific template of type @WeatherSensor_to_Mobile.weatherRequest.");
return single_value->field_kind;
}

int weatherRequest_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherRequest containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherRequest.");
  }
  return 0;
}

void weatherRequest_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ location := ");
single_value->field_location.log();
TTCN_Logger::log_event_str(", date := ");
single_value->field_date.log();
TTCN_Logger::log_event_str(", kind := ");
single_value->field_kind.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void weatherRequest_template::log_match(const weatherRequest& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_location.match(match_value.location(), legacy)){
TTCN_Logger::log_logmatch_info(".location");
single_value->field_location.log_match(match_value.location(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_date.match(match_value.date(), legacy)){
TTCN_Logger::log_logmatch_info(".date");
single_value->field_date.log_match(match_value.date(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_kind.match(match_value.kind(), legacy)){
TTCN_Logger::log_logmatch_info(".kind");
single_value->field_kind.log_match(match_value.kind(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ location := ");
single_value->field_location.log_match(match_value.location(), legacy);
TTCN_Logger::log_event_str(", date := ");
single_value->field_date.log_match(match_value.date(), legacy);
TTCN_Logger::log_event_str(", kind := ");
single_value->field_kind.log_match(match_value.kind(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void weatherRequest_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_location.encode_text(text_buf);
single_value->field_date.encode_text(text_buf);
single_value->field_kind.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherRequest.");
}
}

void weatherRequest_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_location.decode_text(text_buf);
single_value->field_date.decode_text(text_buf);
single_value->field_kind.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new weatherRequest_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @WeatherSensor_to_Mobile.weatherRequest.");
}
}

void weatherRequest_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    weatherRequest_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @WeatherSensor_to_Mobile.weatherRequest has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) date().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) kind().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "date")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          date().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "kind")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          kind().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @WeatherSensor_to_Mobile.weatherRequest: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@WeatherSensor_to_Mobile.weatherRequest");
  }
  is_ifpresent = param.get_ifpresent();
}

void weatherRequest_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_location.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherRequest");
single_value->field_date.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherRequest");
single_value->field_kind.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherRequest");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@WeatherSensor_to_Mobile.weatherRequest");
}

boolean weatherRequest_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean weatherRequest_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

weatherResponse::weatherResponse()
{
}

weatherResponse::weatherResponse(const CHARSTRING& par_location,
    const CHARSTRING& par_date,
    const CHARSTRING& par_kind,
    const INTEGER& par_temperature,
    const INTEGER& par_windVelocity,
    const CHARSTRING& par_conditions)
  :   field_location(par_location),
  field_date(par_date),
  field_kind(par_kind),
  field_temperature(par_temperature),
  field_windVelocity(par_windVelocity),
  field_conditions(par_conditions)
{
}

weatherResponse::weatherResponse(const weatherResponse& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @WeatherSensor_to_Mobile.weatherResponse.");
if (other_value.location().is_bound()) field_location = other_value.location();
else field_location.clean_up();
if (other_value.date().is_bound()) field_date = other_value.date();
else field_date.clean_up();
if (other_value.kind().is_bound()) field_kind = other_value.kind();
else field_kind.clean_up();
if (other_value.temperature().is_bound()) field_temperature = other_value.temperature();
else field_temperature.clean_up();
if (other_value.windVelocity().is_bound()) field_windVelocity = other_value.windVelocity();
else field_windVelocity.clean_up();
if (other_value.conditions().is_bound()) field_conditions = other_value.conditions();
else field_conditions.clean_up();
}

void weatherResponse::clean_up()
{
field_location.clean_up();
field_date.clean_up();
field_kind.clean_up();
field_temperature.clean_up();
field_windVelocity.clean_up();
field_conditions.clean_up();
}

weatherResponse& weatherResponse::operator=(const weatherResponse& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @WeatherSensor_to_Mobile.weatherResponse.");
  if (other_value.location().is_bound()) field_location = other_value.location();
  else field_location.clean_up();
  if (other_value.date().is_bound()) field_date = other_value.date();
  else field_date.clean_up();
  if (other_value.kind().is_bound()) field_kind = other_value.kind();
  else field_kind.clean_up();
  if (other_value.temperature().is_bound()) field_temperature = other_value.temperature();
  else field_temperature.clean_up();
  if (other_value.windVelocity().is_bound()) field_windVelocity = other_value.windVelocity();
  else field_windVelocity.clean_up();
  if (other_value.conditions().is_bound()) field_conditions = other_value.conditions();
  else field_conditions.clean_up();
}
return *this;
}

boolean weatherResponse::operator==(const weatherResponse& other_value) const
{
return field_location==other_value.field_location
  && field_date==other_value.field_date
  && field_kind==other_value.field_kind
  && field_temperature==other_value.field_temperature
  && field_windVelocity==other_value.field_windVelocity
  && field_conditions==other_value.field_conditions;
}

boolean weatherResponse::is_bound() const
{
if(field_location.is_bound()) return TRUE;
if(field_date.is_bound()) return TRUE;
if(field_kind.is_bound()) return TRUE;
if(field_temperature.is_bound()) return TRUE;
if(field_windVelocity.is_bound()) return TRUE;
if(field_conditions.is_bound()) return TRUE;
return FALSE;
}
boolean weatherResponse::is_value() const
{
if(!field_location.is_value()) return FALSE;
if(!field_date.is_value()) return FALSE;
if(!field_kind.is_value()) return FALSE;
if(!field_temperature.is_value()) return FALSE;
if(!field_windVelocity.is_value()) return FALSE;
if(!field_conditions.is_value()) return FALSE;
return TRUE;
}
void weatherResponse::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ location := ");
field_location.log();
TTCN_Logger::log_event_str(", date := ");
field_date.log();
TTCN_Logger::log_event_str(", kind := ");
field_kind.log();
TTCN_Logger::log_event_str(", temperature := ");
field_temperature.log();
TTCN_Logger::log_event_str(", windVelocity := ");
field_windVelocity.log();
TTCN_Logger::log_event_str(", conditions := ");
field_conditions.log();
TTCN_Logger::log_event_str(" }");
}

void weatherResponse::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record value of type @WeatherSensor_to_Mobile.weatherResponse has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) date().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) kind().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) temperature().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) windVelocity().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) conditions().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "date")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          date().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "kind")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          kind().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "temperature")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          temperature().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "windVelocity")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          windVelocity().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "conditions")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          conditions().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @WeatherSensor_to_Mobile.weatherResponse: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@WeatherSensor_to_Mobile.weatherResponse");
  }
}

void weatherResponse::set_implicit_omit()
{
if (location().is_bound()) location().set_implicit_omit();
if (date().is_bound()) date().set_implicit_omit();
if (kind().is_bound()) kind().set_implicit_omit();
if (temperature().is_bound()) temperature().set_implicit_omit();
if (windVelocity().is_bound()) windVelocity().set_implicit_omit();
if (conditions().is_bound()) conditions().set_implicit_omit();
}

void weatherResponse::encode_text(Text_Buf& text_buf) const
{
field_location.encode_text(text_buf);
field_date.encode_text(text_buf);
field_kind.encode_text(text_buf);
field_temperature.encode_text(text_buf);
field_windVelocity.encode_text(text_buf);
field_conditions.encode_text(text_buf);
}

void weatherResponse::decode_text(Text_Buf& text_buf)
{
field_location.decode_text(text_buf);
field_date.decode_text(text_buf);
field_kind.decode_text(text_buf);
field_temperature.decode_text(text_buf);
field_windVelocity.decode_text(text_buf);
field_conditions.decode_text(text_buf);
}

struct weatherResponse_template::single_value_struct {
CHARSTRING_template field_location;
CHARSTRING_template field_date;
CHARSTRING_template field_kind;
INTEGER_template field_temperature;
INTEGER_template field_windVelocity;
CHARSTRING_template field_conditions;
};

void weatherResponse_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_location = ANY_VALUE;
single_value->field_date = ANY_VALUE;
single_value->field_kind = ANY_VALUE;
single_value->field_temperature = ANY_VALUE;
single_value->field_windVelocity = ANY_VALUE;
single_value->field_conditions = ANY_VALUE;
}
}
}

void weatherResponse_template::copy_value(const weatherResponse& other_value)
{
single_value = new single_value_struct;
if (other_value.location().is_bound()) {
  single_value->field_location = other_value.location();
} else {
  single_value->field_location.clean_up();
}
if (other_value.date().is_bound()) {
  single_value->field_date = other_value.date();
} else {
  single_value->field_date.clean_up();
}
if (other_value.kind().is_bound()) {
  single_value->field_kind = other_value.kind();
} else {
  single_value->field_kind.clean_up();
}
if (other_value.temperature().is_bound()) {
  single_value->field_temperature = other_value.temperature();
} else {
  single_value->field_temperature.clean_up();
}
if (other_value.windVelocity().is_bound()) {
  single_value->field_windVelocity = other_value.windVelocity();
} else {
  single_value->field_windVelocity.clean_up();
}
if (other_value.conditions().is_bound()) {
  single_value->field_conditions = other_value.conditions();
} else {
  single_value->field_conditions.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void weatherResponse_template::copy_template(const weatherResponse_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.location().get_selection()) {
single_value->field_location = other_value.location();
} else {
single_value->field_location.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.date().get_selection()) {
single_value->field_date = other_value.date();
} else {
single_value->field_date.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.kind().get_selection()) {
single_value->field_kind = other_value.kind();
} else {
single_value->field_kind.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.temperature().get_selection()) {
single_value->field_temperature = other_value.temperature();
} else {
single_value->field_temperature.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.windVelocity().get_selection()) {
single_value->field_windVelocity = other_value.windVelocity();
} else {
single_value->field_windVelocity.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.conditions().get_selection()) {
single_value->field_conditions = other_value.conditions();
} else {
single_value->field_conditions.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new weatherResponse_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherResponse.");
break;
}
set_selection(other_value);
}

weatherResponse_template::weatherResponse_template()
{
}

weatherResponse_template::weatherResponse_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

weatherResponse_template::weatherResponse_template(const weatherResponse& other_value)
{
copy_value(other_value);
}

weatherResponse_template::weatherResponse_template(const OPTIONAL<weatherResponse>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const weatherResponse&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @WeatherSensor_to_Mobile.weatherResponse from an unbound optional field.");
}
}

weatherResponse_template::weatherResponse_template(const weatherResponse_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

weatherResponse_template::~weatherResponse_template()
{
clean_up();
}

weatherResponse_template& weatherResponse_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

weatherResponse_template& weatherResponse_template::operator=(const weatherResponse& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

weatherResponse_template& weatherResponse_template::operator=(const OPTIONAL<weatherResponse>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const weatherResponse&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @WeatherSensor_to_Mobile.weatherResponse.");
}
return *this;
}

weatherResponse_template& weatherResponse_template::operator=(const weatherResponse_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean weatherResponse_template::match(const weatherResponse& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.location().is_bound()) return FALSE;
if(!single_value->field_location.match(other_value.location(), legacy))return FALSE;
if(!other_value.date().is_bound()) return FALSE;
if(!single_value->field_date.match(other_value.date(), legacy))return FALSE;
if(!other_value.kind().is_bound()) return FALSE;
if(!single_value->field_kind.match(other_value.kind(), legacy))return FALSE;
if(!other_value.temperature().is_bound()) return FALSE;
if(!single_value->field_temperature.match(other_value.temperature(), legacy))return FALSE;
if(!other_value.windVelocity().is_bound()) return FALSE;
if(!single_value->field_windVelocity.match(other_value.windVelocity(), legacy))return FALSE;
if(!other_value.conditions().is_bound()) return FALSE;
if(!single_value->field_conditions.match(other_value.conditions(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherResponse.");
}
return FALSE;
}

boolean weatherResponse_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_location.is_bound()) return TRUE;
if (single_value->field_date.is_bound()) return TRUE;
if (single_value->field_kind.is_bound()) return TRUE;
if (single_value->field_temperature.is_bound()) return TRUE;
if (single_value->field_windVelocity.is_bound()) return TRUE;
if (single_value->field_conditions.is_bound()) return TRUE;
return FALSE;
}

boolean weatherResponse_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_location.is_value()) return FALSE;
if (!single_value->field_date.is_value()) return FALSE;
if (!single_value->field_kind.is_value()) return FALSE;
if (!single_value->field_temperature.is_value()) return FALSE;
if (!single_value->field_windVelocity.is_value()) return FALSE;
if (!single_value->field_conditions.is_value()) return FALSE;
return TRUE;
}

void weatherResponse_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

weatherResponse weatherResponse_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing a valueof or send operation on a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
weatherResponse ret_val;
if (single_value->field_location.is_bound()) {
ret_val.location() = single_value->field_location.valueof();
}
if (single_value->field_date.is_bound()) {
ret_val.date() = single_value->field_date.valueof();
}
if (single_value->field_kind.is_bound()) {
ret_val.kind() = single_value->field_kind.valueof();
}
if (single_value->field_temperature.is_bound()) {
ret_val.temperature() = single_value->field_temperature.valueof();
}
if (single_value->field_windVelocity.is_bound()) {
ret_val.windVelocity() = single_value->field_windVelocity.valueof();
}
if (single_value->field_conditions.is_bound()) {
ret_val.conditions() = single_value->field_conditions.valueof();
}
return ret_val;
}

void weatherResponse_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @WeatherSensor_to_Mobile.weatherResponse.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new weatherResponse_template[list_length];
}

weatherResponse_template& weatherResponse_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @WeatherSensor_to_Mobile.weatherResponse.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @WeatherSensor_to_Mobile.weatherResponse.");
return value_list.list_value[list_index];
}

CHARSTRING_template& weatherResponse_template::location()
{
set_specific();
return single_value->field_location;
}

const CHARSTRING_template& weatherResponse_template::location() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field location of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_location;
}

CHARSTRING_template& weatherResponse_template::date()
{
set_specific();
return single_value->field_date;
}

const CHARSTRING_template& weatherResponse_template::date() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field date of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_date;
}

CHARSTRING_template& weatherResponse_template::kind()
{
set_specific();
return single_value->field_kind;
}

const CHARSTRING_template& weatherResponse_template::kind() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field kind of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_kind;
}

INTEGER_template& weatherResponse_template::temperature()
{
set_specific();
return single_value->field_temperature;
}

const INTEGER_template& weatherResponse_template::temperature() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field temperature of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_temperature;
}

INTEGER_template& weatherResponse_template::windVelocity()
{
set_specific();
return single_value->field_windVelocity;
}

const INTEGER_template& weatherResponse_template::windVelocity() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field windVelocity of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_windVelocity;
}

CHARSTRING_template& weatherResponse_template::conditions()
{
set_specific();
return single_value->field_conditions;
}

const CHARSTRING_template& weatherResponse_template::conditions() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field conditions of a non-specific template of type @WeatherSensor_to_Mobile.weatherResponse.");
return single_value->field_conditions;
}

int weatherResponse_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 6;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @WeatherSensor_to_Mobile.weatherResponse containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherResponse.");
  }
  return 0;
}

void weatherResponse_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ location := ");
single_value->field_location.log();
TTCN_Logger::log_event_str(", date := ");
single_value->field_date.log();
TTCN_Logger::log_event_str(", kind := ");
single_value->field_kind.log();
TTCN_Logger::log_event_str(", temperature := ");
single_value->field_temperature.log();
TTCN_Logger::log_event_str(", windVelocity := ");
single_value->field_windVelocity.log();
TTCN_Logger::log_event_str(", conditions := ");
single_value->field_conditions.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void weatherResponse_template::log_match(const weatherResponse& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_location.match(match_value.location(), legacy)){
TTCN_Logger::log_logmatch_info(".location");
single_value->field_location.log_match(match_value.location(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_date.match(match_value.date(), legacy)){
TTCN_Logger::log_logmatch_info(".date");
single_value->field_date.log_match(match_value.date(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_kind.match(match_value.kind(), legacy)){
TTCN_Logger::log_logmatch_info(".kind");
single_value->field_kind.log_match(match_value.kind(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_temperature.match(match_value.temperature(), legacy)){
TTCN_Logger::log_logmatch_info(".temperature");
single_value->field_temperature.log_match(match_value.temperature(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_windVelocity.match(match_value.windVelocity(), legacy)){
TTCN_Logger::log_logmatch_info(".windVelocity");
single_value->field_windVelocity.log_match(match_value.windVelocity(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_conditions.match(match_value.conditions(), legacy)){
TTCN_Logger::log_logmatch_info(".conditions");
single_value->field_conditions.log_match(match_value.conditions(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ location := ");
single_value->field_location.log_match(match_value.location(), legacy);
TTCN_Logger::log_event_str(", date := ");
single_value->field_date.log_match(match_value.date(), legacy);
TTCN_Logger::log_event_str(", kind := ");
single_value->field_kind.log_match(match_value.kind(), legacy);
TTCN_Logger::log_event_str(", temperature := ");
single_value->field_temperature.log_match(match_value.temperature(), legacy);
TTCN_Logger::log_event_str(", windVelocity := ");
single_value->field_windVelocity.log_match(match_value.windVelocity(), legacy);
TTCN_Logger::log_event_str(", conditions := ");
single_value->field_conditions.log_match(match_value.conditions(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void weatherResponse_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_location.encode_text(text_buf);
single_value->field_date.encode_text(text_buf);
single_value->field_kind.encode_text(text_buf);
single_value->field_temperature.encode_text(text_buf);
single_value->field_windVelocity.encode_text(text_buf);
single_value->field_conditions.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @WeatherSensor_to_Mobile.weatherResponse.");
}
}

void weatherResponse_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_location.decode_text(text_buf);
single_value->field_date.decode_text(text_buf);
single_value->field_kind.decode_text(text_buf);
single_value->field_temperature.decode_text(text_buf);
single_value->field_windVelocity.decode_text(text_buf);
single_value->field_conditions.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new weatherResponse_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @WeatherSensor_to_Mobile.weatherResponse.");
}
}

void weatherResponse_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    weatherResponse_template new_temp;
    new_temp.set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      new_temp.list_item(p_i).set_param(*param.get_elem(p_i));
    }
    *this = new_temp;
    break; }
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record template of type @WeatherSensor_to_Mobile.weatherResponse has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) date().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) kind().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) temperature().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) windVelocity().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) conditions().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), FALSE);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "date")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          date().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "kind")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          kind().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "temperature")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          temperature().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "windVelocity")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          windVelocity().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "conditions")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          conditions().set_param(*curr_param);
        }
        value_used[val_idx]=TRUE;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @WeatherSensor_to_Mobile.weatherResponse: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@WeatherSensor_to_Mobile.weatherResponse");
  }
  is_ifpresent = param.get_ifpresent();
}

void weatherResponse_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_location.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
single_value->field_date.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
single_value->field_kind.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
single_value->field_temperature.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
single_value->field_windVelocity.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
single_value->field_conditions.check_restriction(t_res, t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@WeatherSensor_to_Mobile.weatherResponse");
}

boolean weatherResponse_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean weatherResponse_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void weatherPort_BASE::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void weatherPort_BASE::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

weatherPort_BASE::weatherPort_BASE(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

weatherPort_BASE::~weatherPort_BASE()
{
clear_queue();
}

void weatherPort_BASE::send(const weatherRequest& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @WeatherSensor_to_Mobile.weatherRequest : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) {
(void)get_default_destination();
outgoing_send(send_par);
}
else {
Text_Buf text_buf;
prepare_message(text_buf, "@WeatherSensor_to_Mobile.weatherRequest");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void weatherPort_BASE::send(const weatherRequest& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void weatherPort_BASE::send(const weatherRequest_template& send_par, const COMPONENT& destination_component)
{
const weatherRequest& send_par_value = weatherRequest(send_par.valueof());
send(send_par_value, destination_component);
}

void weatherPort_BASE::send(const weatherRequest_template& send_par)
{
const weatherRequest& send_par_value = weatherRequest(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status weatherPort_BASE::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status weatherPort_BASE::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status weatherPort_BASE::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status weatherPort_BASE::receive(const weatherResponse_template& value_template, weatherResponse *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherResponse.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status weatherPort_BASE::check_receive(const weatherResponse_template& value_template, weatherResponse *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherResponse.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status weatherPort_BASE::trigger(const weatherResponse_template& value_template, weatherResponse *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherResponse.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherResponse : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void weatherPort_BASE::incoming_message(const weatherResponse& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @WeatherSensor_to_Mobile.weatherResponse : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new weatherResponse(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean weatherPort_BASE::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@WeatherSensor_to_Mobile.weatherResponse")) {
weatherResponse incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}

void servicePort_BASE::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void servicePort_BASE::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

servicePort_BASE::servicePort_BASE(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

servicePort_BASE::~servicePort_BASE()
{
clear_queue();
}

void servicePort_BASE::send(const weatherResponse& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @WeatherSensor_to_Mobile.weatherResponse : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) {
(void)get_default_destination();
outgoing_send(send_par);
}
else {
Text_Buf text_buf;
prepare_message(text_buf, "@WeatherSensor_to_Mobile.weatherResponse");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void servicePort_BASE::send(const weatherResponse& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void servicePort_BASE::send(const weatherResponse_template& send_par, const COMPONENT& destination_component)
{
const weatherResponse& send_par_value = weatherResponse(send_par.valueof());
send(send_par_value, destination_component);
}

void servicePort_BASE::send(const weatherResponse_template& send_par)
{
const weatherResponse& send_par_value = weatherResponse(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status servicePort_BASE::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status servicePort_BASE::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status servicePort_BASE::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status servicePort_BASE::receive(const weatherRequest_template& value_template, weatherRequest *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherRequest.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status servicePort_BASE::check_receive(const weatherRequest_template& value_template, weatherRequest *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Check-receive operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherRequest.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status servicePort_BASE::trigger(const weatherRequest_template& value_template, weatherRequest *value_redirect, const COMPONENT_template& sender_template, COMPONENT *sender_ptr, Index_Redirect*)
{
if (value_template.get_selection() == ANY_OR_OMIT) TTCN_error("Trigger operation using '*' as matching template");
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @WeatherSensor_to_Mobile.weatherRequest.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_redirect != NULL) {
*value_redirect = *my_head->message_0;
}
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @WeatherSensor_to_Mobile.weatherRequest : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void servicePort_BASE::incoming_message(const weatherRequest& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @WeatherSensor_to_Mobile.weatherRequest : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new weatherRequest(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean servicePort_BASE::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@WeatherSensor_to_Mobile.weatherRequest")) {
weatherRequest incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}


/* Bodies of functions, altsteps and testcases */

void weather__Office()
{
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 73 */
{
tmp_2:
alt_status tmp_2_alt_flag_0 = ALT_MAYBE;
alt_status tmp_2_alt_flag_1 = ALT_MAYBE;
alt_status tmp_2_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_2_alt_flag_0 == ALT_MAYBE) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 74 */
tmp_2_alt_flag_0 = MTCType1_component_weatherOffice.receive(FrankfurtResponse, NULL, any_compref, NULL, NULL);
if (tmp_2_alt_flag_0 == ALT_YES) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 75 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_2_alt_flag_1 == ALT_MAYBE) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 77 */
tmp_2_alt_flag_1 = MTCType1_component_weatherOffice.receive(any_compref, NULL, NULL);
if (tmp_2_alt_flag_1 == ALT_YES) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 78 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_2_default_flag == ALT_MAYBE) {
tmp_2_default_flag = TTCN_Default::try_altsteps();
if (tmp_2_default_flag == ALT_YES || tmp_2_default_flag == ALT_BREAK) break;
else if (tmp_2_default_flag == ALT_REPEAT) goto tmp_2;
}
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 73 */
if (tmp_2_alt_flag_0 == ALT_NO && tmp_2_alt_flag_1 == ALT_NO && tmp_2_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file C:\\Users\\Vinnu\\workspace\\WeatherSensor_to_Mobile\\src\\WeatherSensor_to_Mobile.ttcn between lines 73 and 80.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_weather__Office(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function weather_Office(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "WeatherSensor_to_Mobile", "weather_Office", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void weather__Service(const weatherResponse_template& serviceFrankfurtResponse)
{
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 84 */
{
tmp_3:
alt_status tmp_3_alt_flag_0 = ALT_MAYBE;
alt_status tmp_3_alt_flag_1 = ALT_MAYBE;
alt_status tmp_3_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_3_alt_flag_0 == ALT_MAYBE) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 85 */
tmp_3_alt_flag_0 = MTCType2_component_weatherService.receive(FrankfurtWeekendWeatherRequest, NULL, any_compref, NULL, NULL);
if (tmp_3_alt_flag_0 == ALT_YES) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 86 */
MTCType2_component_weatherService.send(serviceFrankfurtResponse);
{
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 87 */
TTCN_Runtime::setverdict(PASS);
}
break;
}
}
if (tmp_3_alt_flag_1 == ALT_MAYBE) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 90 */
tmp_3_alt_flag_1 = MTCType2_component_weatherService.receive(any_compref, NULL, NULL);
if (tmp_3_alt_flag_1 == ALT_YES) {
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 91 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_3_default_flag == ALT_MAYBE) {
tmp_3_default_flag = TTCN_Default::try_altsteps();
if (tmp_3_default_flag == ALT_YES || tmp_3_default_flag == ALT_BREAK) break;
else if (tmp_3_default_flag == ALT_REPEAT) goto tmp_3;
}
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 84 */
if (tmp_3_alt_flag_0 == ALT_NO && tmp_3_alt_flag_1 == ALT_NO && tmp_3_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file C:\\Users\\Vinnu\\workspace\\WeatherSensor_to_Mobile\\src\\WeatherSensor_to_Mobile.ttcn between lines 84 and 93.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_weather__Service(const COMPONENT& component_reference, const weatherResponse_template& serviceFrankfurtResponse)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function weather_Service(");
serviceFrankfurtResponse.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "WeatherSensor_to_Mobile", "weather_Service", text_buf);
serviceFrankfurtResponse.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

verdicttype testcase_testWeather(const weatherResponse_template& serviceFrankfurtResponse, boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("WeatherSensor_to_Mobile", "testWeather", "WeatherSensor_to_Mobile", "MTCType1", "WeatherSensor_to_Mobile", "MTCType1", has_timer, timer_value);
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 97 */
COMPONENT service(TTCN_Runtime::create_component("WeatherSensor_to_Mobile", "MTCType2", NULL, NULL, FALSE));
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 99 */
TTCN_Runtime::connect_port(self, MTCType1_component_weatherOffice.get_name(), service, MTCType2_component_weatherService.get_name());
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 100 */
start_weather__Service(service, serviceFrankfurtResponse);
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 101 */
MTCType1_component_weatherOffice.send(officeFrankfurtWeekendWeatherRequest);
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 102 */
weather__Office();
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 103 */
{
tmp_4:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = service.done(NULL);
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_4;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_4;
}
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 103 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file C:\\Users\\Vinnu\\workspace\\WeatherSensor_to_Mobile\\src\\WeatherSensor_to_Mobile.ttcn, line 103.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case testWeather was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
module_object.add_function("weather_Office", (genericfunc_t)&weather__Office, (genericfunc_t)&start_weather__Office);
module_object.add_function("weather_Service", (genericfunc_t)&weather__Service, (genericfunc_t)&start_weather__Service);
module_object.add_testcase_pard("testWeather", (genericfunc_t)&testcase_testWeather);
}

static void post_init_module()
{
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 9 */
template_FrankfurtWeekendWeatherRequest.location() = cs_0;
template_FrankfurtWeekendWeatherRequest.date() = cs_1;
template_FrankfurtWeekendWeatherRequest.kind() = cs_2;
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 14 */
template_officeFrankfurtWeekendWeatherRequest.location() = cs_0;
template_officeFrankfurtWeekendWeatherRequest.date() = cs_1;
template_officeFrankfurtWeekendWeatherRequest.kind() = cs_2;
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 28 */
template_FrankfurtResponse.location() = cs_0;
template_FrankfurtResponse.date() = cs_1;
template_FrankfurtResponse.kind() = cs_2;
{
INTEGER_template& tmp_0 = template_FrankfurtResponse.temperature();
tmp_0.set_type(VALUE_RANGE);
tmp_0.set_min(15);
tmp_0.set_max(30);
}
{
INTEGER_template& tmp_1 = template_FrankfurtResponse.windVelocity();
tmp_1.set_type(VALUE_RANGE);
tmp_1.set_min(0);
tmp_1.set_max(20);
}
template_FrankfurtResponse.conditions() = cs_3;
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 36 */
template_serviceFrankfurtResponse1.location() = cs_0;
template_serviceFrankfurtResponse1.date() = cs_1;
template_serviceFrankfurtResponse1.kind() = cs_2;
template_serviceFrankfurtResponse1.temperature() = 20;
template_serviceFrankfurtResponse1.windVelocity() = 15;
template_serviceFrankfurtResponse1.conditions() = cs_3;
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 45 */
template_serviceFrankfurtResponse2.location() = cs_0;
template_serviceFrankfurtResponse2.date() = cs_1;
template_serviceFrankfurtResponse2.kind() = cs_2;
template_serviceFrankfurtResponse2.temperature() = 200;
template_serviceFrankfurtResponse2.windVelocity() = 15;
template_serviceFrankfurtResponse2.conditions() = cs_3;
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "MTCType1")) {
MTCType1_component_weatherOffice.activate_port();
return TRUE;
} else if (!strcmp(component_type, "MTCType2")) {
MTCType2_component_weatherService.activate_port();
return TRUE;
} else return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "weather_Office")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function weather_Office().");
TTCN_Runtime::function_started(function_arguments);
weather__Office();
TTCN_Runtime::function_finished("weather_Office");
return TRUE;
} else if (!strcmp(function_name, "weather_Service")) {
weatherResponse_template serviceFrankfurtResponse;
serviceFrankfurtResponse.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function weather_Service(");
serviceFrankfurtResponse.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
weather__Service(serviceFrankfurtResponse);
TTCN_Runtime::function_finished("weather_Service");
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("WeatherSensor_to_Mobile");
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 108 */
testcase_testWeather(serviceFrankfurtResponse1, FALSE, 0.0);
/* C:\Users\Vinnu\workspace\WeatherSensor_to_Mobile\src\WeatherSensor_to_Mobile.ttcn, line 109 */
testcase_testWeather(serviceFrankfurtResponse2, FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
